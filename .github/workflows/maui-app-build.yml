
name: Build MAUI App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-package:
    name: Build and Package
    strategy:
      matrix:
        os: [windows-latest]
        platform: [android]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Get the code
      uses: actions/checkout@v4

    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x' # Replace with your MAUI framework version

    - name: Restore project dependencies
      run: dotnet restore

    - name: Build and Package for ${{ matrix.platform }}
      run: |
        case "${{ matrix.os }}-${{ matrix.platform }}" in
          windows-latest-android)
            echo "🛠️ Building Android App"
            dotnet build -c Release -f net9.0-android
            echo "🔑 Signing Android App"
            # 1. Decode your keystore file (if you're storing it as a base64 secret)
            - name: Decode Android Keystore
              shell: bash
              run: |
                echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > android.keystore
            # 2. Sign the APK/AAB using `msbuild`
            - name: Sign and Package Android App
              run: |
                msbuild src/Services/Pixsale.App.csproj /t:SignAndroidPackage /p:Configuration=Release /p:AndroidPackageFormat=aab /p:AndroidKeyStore=True /p:AndroidSigningKeyStore=android.keystore /p:AndroidSigningStorePass="${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" /p:AndroidSigningKeyAlias="${{ secrets.ANDROID_KEY_ALIAS }}" /p:AndroidSigningKeyPass="${{ secrets.ANDROID_KEY_PASSWORD }}"
            ;;
        esac

    - name: Save the built app (${{ matrix.platform }})
      uses: actions/upload-artifact@v4 # Or try @v2
      with:
        name: ${{ matrix.platform }}-app
        path: |
          ./bin/Release/*/*.apk
  
