@page "/purchase-form/{PurchaseId:guid?}";
@using System.ComponentModel
@using System.Reflection
@using static Pixsale.Shared.Components.App.Product.ProductForm

@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager;

<button @onclick="@(()=>NavigationManager.NavigateTo("/purchases"))" class="text-tata hover:text-blue-900 focus:outline-none">←</button>
<h2>Purchases</h2>

<EditForm Model="@Model" OnValidSubmit="@SubmitPurchase">
	<DataAnnotationsValidator />

	<div>
		<label class="block text-sm font-medium text-gray-700 mb-1">Purchase Date</label>
		<input @bind-value="Model.PurchaseDate" type="date" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-tata" />
		<ValidationMessage For="() => Model.PurchaseDate" />
	</div>

	<div>
		<label class="block text-sm font-medium text-gray-700 mb-1">Status</label>
		<select @bind="Model.Status" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-tata">
			<option value="">Select Supplier</option>
			@foreach (var status in Enum.GetValues<PurchaseStatus>())
			{
				<option value="@status">@GetEnumDescription(status)</option>
			}
		</select>
	</div>

	<MudAutocomplete T="EnityDto"
					 Variant="Variant.Outlined"
					 Dense="true"
					 @bind-Value="SelectedSupplier"
					 Label="Search Supplier"
					 ToStringFunc="@(x => x?.Name)"
					 SearchFunc="@SearchSupplierAsync"
					 class="w-full mb-4" />

	<ValidationMessage For="() => Model.SupplierId" />

	<MudAutocomplete T="EnityDto"
					 Variant="Variant.Outlined"
					 Dense="true"
					 Label="Search Product"
					 ToStringFunc="@(x => x?.Name)"
					 SearchFunc="@SearchProductAsync"
					 ValueChanged="@OnProductChanged"
					 class="w-full mb-4" />
</EditForm>

<MudTable Items="@Items" Hover="true" Breakpoint="Breakpoint.Sm">
	<HeaderContent>
		<MudTh>Name</MudTh>
		<MudTh>Quantity</MudTh>
	</HeaderContent>
	<RowTemplate>
		<MudTd DataLabel="Name">@context.ProductName</MudTd>
		<MudTd DataLabel="Quantity">@context.Quantity</MudTd>
	</RowTemplate>
	
</MudTable>


@code {
	[Parameter]
	public Guid? PurchaseId { get; set; }
	public PurchaseModel Model { get; set; } = new();
	protected List<EnityDto> Suppliers { get; set; } = new();
	protected List<EnityDto> Products { get; set; } = new();
	protected List<Item> Items = new();
	protected EnityDto SelectedSupplier = new();


	public Color SelectedColor { get; set; } = Color.Default;

	public void OnProductChanged(EnityDto? product)
	{
		if (product == null)
		{
			return;
		}
		Items.Add(new Item
			{
				ProductId = product?.Id ?? Guid.Empty,
				ProductName = product?.Name ?? string.Empty,
				Quantity = 1,
				Price = 0
			});
	}

	public void OnSupplierChanged(EnityDto? supplier)
	{
		if (supplier != null)
		{
			Model.SupplierId = supplier.Id;
		}
		else
		{
			Model.SupplierId = Guid.Empty;
		}
	}

	protected override async Task OnInitializedAsync()
	{
	}

	private async Task<IEnumerable<EnityDto>?> SearchProductAsync(string value, CancellationToken token)
	{
		var client = HttpClientFactory.CreateClient("ProductApi");
		return await client.GetFromJsonAsync<List<EnityDto>>($"api/product?name={value ?? string.Empty}") ?? new List<EnityDto>();

	}

	private async Task<IEnumerable<EnityDto>?> SearchSupplierAsync(string value, CancellationToken token)
	{
		var client = HttpClientFactory.CreateClient("ProductApi");
		var result = await client.GetFromJsonAsync<List<EnityDto>>($"api/supplier?name={value ?? string.Empty}");
		Console.WriteLine(result);
		return result;
	}

	private async Task SubmitPurchase()
	{

	}
	private string GetEnumDescription(Enum value)
	{
		var field = value.GetType().GetField(value.ToString());
		var attr = field?.GetCustomAttribute<DescriptionAttribute>();
		return attr?.Description ?? value.ToString();
	}





	public class PurchaseModel
	{
		public Guid Id { get; set; }
		public Guid SupplierId { get; set; } = Guid.Empty;
		public DateTime PurchaseDate { get; set; } = DateTime.Now;
		public PurchaseStatus Status { get; set; } = PurchaseStatus.Draft;
		public decimal TotalAmount { get; set; }
		public List<Item> Items { get; set; } = new();
	}

	public class Item
	{
		public Guid ProductId { get; set; }
		public string ProductName { get; set; } = string.Empty;
		public int Quantity { get; set; }
		public decimal Price { get; set; }
	}

	public enum PurchaseStatus
	{
		Quotation,
		Draft,
		Confirmed,
		Received,
		Cancelled
	}
}