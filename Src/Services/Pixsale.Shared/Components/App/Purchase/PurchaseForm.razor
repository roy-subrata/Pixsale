@page "/purchase-form/{PurchaseId:guid?}";
@using System.ComponentModel
@using System.Reflection
@using static Pixsale.Shared.Components.App.Product.ProductForm

@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager;

<button @onclick="@(()=>NavigationManager.NavigateTo("/purchases"))" class="text-tata hover:text-blue-900 focus:outline-none">←</button>
<h2>Purchases</h2>

<EditForm Model="@Model" OnValidSubmit="@SubmitPurchase">
	<DataAnnotationsValidator />

	<div>
		<label class="block text-sm font-medium text-gray-700 mb-1">Purchase Date</label>
		<input @bind-value="Model.PurchaseDate" type="date" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-tata" />
		<ValidationMessage For="() => Model.PurchaseDate" />
	</div>

	<div>
		<label class="block text-sm font-medium text-gray-700 mb-1">Status</label>
		<select @bind="Model.Status" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-tata">
			<option value="">Select Supplier</option>
			@foreach (var status in Enum.GetValues<PurchaseStatus>())
			{
				<option value="@status">@GetEnumDescription(status)</option>
			}
		</select>
	</div>

	<div>
		<label class="block text-sm font-medium text-gray-700 mb-1">Supplier</label>
		<select @bind="Model.SupplierId" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-tata">
			<option value="">Select Supplier</option>
			@foreach (var supplier in Suppliers)
			{
				<option value="@supplier.Id">@supplier.Name</option>
			}
		</select>
		<ValidationMessage For="() => Model.SupplierId" />
	</div

	@* <div>
		<MudAutocomplete T="EnityDto" Label="US States" @bind-Value="searchProduct" SearchFunc="@SearchProduct" Variant="Variant.Outlined" ProgressIndicatorColor="SelectedColor">
            <ProgressIndicatorInPopoverTemplate>
                <MudList T="EnityDto" ReadOnly>
                    <MudListItem>
                        Loading...
                    </MudListItem>
                </MudList>
            </ProgressIndicatorInPopoverTemplate>
        </MudAutocomplete>
	</div> *@
</EditForm>


@code {
	[Parameter]
	public Guid? PurchaseId { get; set; }
	public PurchaseModel Model { get; set; } = new();
	protected List<EnityDto> Suppliers { get; set; } = new();
	protected List<EnityDto> Products { get; set; } = new();
	protected List<PurchaseItem> Items { get; set; } = new ();
	protected EnityDto searchProduct = new();

	public Color SelectedColor { get; set; } = Color.Default;

	protected override async Task OnInitializedAsync()
	{
		await LoadSupplierAsync();
		await LoadProductAsync();
	}
	 private async Task<IEnumerable<EnityDto>> SearchProduct(string value, CancellationToken token)
    {
       return await Task.Run(() =>
		{
			var filteredProducts = Products.Where(p => p.Name.Contains(value, StringComparison.OrdinalIgnoreCase));
			return filteredProducts;
		}, token);
    }
	private async Task SubmitPurchase()
	{

	}
	private string GetEnumDescription(Enum value)
    {
        var field = value.GetType().GetField(value.ToString());
        var attr = field?.GetCustomAttribute<DescriptionAttribute>();
        return attr?.Description ?? value.ToString();
    }
	private async Task LoadSupplierAsync()
	{
		var client = HttpClientFactory.CreateClient("ProductApi");
		Suppliers = await client.GetFromJsonAsync<List<EnityDto>>("api/customer") ?? new List<EnityDto>();
	}

	private async Task LoadProductAsync()
	{
		var client = HttpClientFactory.CreateClient("ProductApi");
		Products = await client.GetFromJsonAsync<List<EnityDto>>("api/product") ?? new List<EnityDto>();
	}


	public class PurchaseModel
	{
		public Guid Id { get; set; }
		public Guid SupplierId { get; set; } = Guid.Empty;
		public DateTime PurchaseDate { get; set; } = DateTime.Now;
		public PurchaseStatus Status { get; set; } = PurchaseStatus.Draft;
		public decimal TotalAmount { get; set; }
		public List<PurchaseItem> Items { get; set; } = new List<PurchaseItem>();
	}

	public class PurchaseItem
	{
		public Guid ProductId { get; set; }
		public string ProductName { get; set; } = string.Empty;
		public int Quantity { get; set; }
		public decimal Price { get; set; }
	}

	public enum PurchaseStatus
	{
		Quotation,
		Draft,
		Confirmed,
		Received,
		Cancelled
	}
}