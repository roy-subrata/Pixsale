@page "/product-form/{ProductId:guid?}"
@using System.ComponentModel.DataAnnotations
@inject IHttpClientFactory HttpClientFactory;
@inject NavigationManager NavigationManager;

<button @onclick="@(()=>NavigationManager.NavigateTo("/products"))" class="text-tata hover:text-blue-900 focus:outline-none">←</button>
<h2>Products</h2>
<EditForm Model="@Model" OnValidSubmit="@SumbitProduct">
	<DataAnnotationsValidator />
	<div class="p-6 mt-5 bg-white rounded-2xl shadow space-y-6">
		<!-- Product Name -->
		<div>
			<label class="block text-sm font-medium text-gray-700 mb-1">Product Name</label>
			<input @bind-value="Model.Name" type="text" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-tata" />
			<ValidationMessage For="() => Model.Name" />
		</div>

		<div>
			<label class="block text-sm font-medium text-gray-700 mb-1">Description</label>
			<input @bind-value="Model.Description" type="text" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-tata" />
		</div>

		<div>
			<label class="block text-sm font-medium text-gray-700 mb-1">Category</label>
			<select @bind="Model.CategoryId" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-tata">
				<option value="">Select category</option>
				@foreach (var category in Categories)
				{
					<option value="@category.Id">@category.Name</option>
				}
			</select>
			<ValidationMessage For="() => Model.CategoryId" />
		</div>

		@* Save Button *@
		<div class="text-right">
			<button type="submit" class="bg-tata text-white px-6 py-2 rounded-lg hover:bg-blue-900 transition">
				Save
			</button>
		</div>

	</div>
</EditForm>

@code {

	[Parameter]
	public Guid ProductId { get; set; }

	public ProductDto Model { get; set; } = new();

	public List<CategoryDto> Categories { get; set; } = new();

	private async Task LoadCategory()
	{
		try
		{
			HttpClient client = HttpClientFactory.CreateClient("CategoryClient");
			Categories = await client.GetFromJsonAsync<List<CategoryDto>>("api/category") ?? new List<CategoryDto>();
		}
		catch (Exception ex)
		{
			Console.Error.WriteLine($"Error fetching categories: {ex.Message}");
		}
	}

	protected override async Task OnInitializedAsync()
	{
		await LoadCategory();

		if (ProductId != Guid.Empty)
		{
			HttpClient client = HttpClientFactory.CreateClient("ProductClient");
			var product = await client.GetFromJsonAsync<ProductDto>($"api/product/{ProductId}");
			if (product != null)
				Model = product;
		}
	}

	protected async Task SumbitProduct()
	{
		HttpClient client = HttpClientFactory.CreateClient("ProductClient");
		if (Model.Id == Guid.Empty)
		{
			await client.PostAsJsonAsync("api/product", Model);
		}
		else
		{
			await client.PutAsJsonAsync($"api/product/{Model.Id}", Model);
		}

		NavigationManager.NavigateTo("/products");
	}

	public class ProductDto
	{
		public Guid Id { get; set; }
		[Required(ErrorMessage = "Product name is required")]
		public string Name { get; set; } = string.Empty;
		public string Description { get; set; } = string.Empty;
		[Required(ErrorMessage = "Category is required")]
		public Guid CategoryId { get; set; } = Guid.Empty;
		public int TotalQty { get; set; }
	}

	public class CategoryDto
	{
		public Guid Id { get; set; }
		public string Name { get; set; } = string.Empty;
	}
}
